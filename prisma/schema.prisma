// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Service {
  id        Int      @id @default(sequence())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  colour    String
  price     Int
  Clinic    Clinic?  @relation(fields: [clinicId], references: [id])
  clinicId  Int?
}

model Clinic {
  id        Int        @id @default(sequence())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  address   String
  mobile    String?
  person    Person     @relation(fields: [personId], references: [id])
  personId  Int        @unique
  groupId   Int
  group     Group      @relation(fields: [groupId], references: [id])
  Service   Service[]
  Customer  Customer[]
}

model Group {
  id        Int      @id @default(sequence())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  email     String
  mobile    String
  Clinic    Clinic[]
}

model Person {
  id             Int              @id @default(sequence())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  email          String           @unique
  name           String?
  mobile         String           @unique
  altMobile      String?
  password       String?
  gender         String?
  wages          String?
  dob            String?
  aadhar         String?
  panNumber      String?
  type           String?
  isActive       Boolean?
  clinic         Clinic[]
  PaymentDetails PaymentDetails[]
  ProfileSnap    ProfileSnap[]
  Privs          Privs[]
}

model PaymentDetails {
  id        Int      @default(sequence())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bankName  String
  accountNo String
  ifscCode  String
  isActive  Boolean
  personId  Int
  Person    Person   @relation(fields: [personId], references: [id])

  @@id([personId, id])
}

model ProfileSnap {
  id        Int      @default(sequence())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  details   String
  personId  Int
  Person    Person   @relation(fields: [personId], references: [id])

  @@id([personId, id])
}

model Privs {
  id        Int      @default(sequence())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  colour    String
  personId  Int
  Person    Person   @relation(fields: [personId], references: [id])

  @@id([personId, id])
}

model Customer {
  id        Int      @id @default(sequence())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  name      String?
  address   String
  mobile    String?
  clinicId  Int
  clinic    Clinic   @relation(fields: [clinicId], references: [id])
  Log       Log?     @relation(fields: [logId], references: [id])
  logId     Int?
}

model Log {
  id         Int        @id @default(sequence())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  details    String
  customerId Int
  customer   Customer[]
}
